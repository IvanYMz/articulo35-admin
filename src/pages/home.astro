---
import Layout from "../layouts/Layout.astro";
import { supabase } from "../lib/supabase";
import type { Student } from "../types/types";

// Get the access and refresh tokens from cookies
const accessToken = Astro.cookies.get("sb-access-token");
const refreshToken = Astro.cookies.get("sb-refresh-token");

// If either token is missing, redirect to the sign-in page
if (!accessToken || !refreshToken) {
    return Astro.redirect("/signin");
}

// Attempt to set the session using the tokens
let session;
try {
    session = await supabase.auth.setSession({
        refresh_token: refreshToken.value,
        access_token: accessToken.value,
    });

    // If there is an error setting the session, delete the cookies and redirect to sign-in
    if (session.error) {
        Astro.cookies.delete("sb-access-token", { path: "/" });
        Astro.cookies.delete("sb-refresh-token", { path: "/" });
        return Astro.redirect("/signin");
    }
} catch (error) {
    // If an error occurs, delete the cookies and redirect to sign-in
    Astro.cookies.delete("sb-access-token", { path: "/" });
    Astro.cookies.delete("sb-refresh-token", { path: "/" });
    return Astro.redirect("/signin");
}

// Fetch student data from the API
let students: Student[] = [];
try {
    const response = await fetch("http://localhost:4321/api/students_info/requests");

    if (!response.ok) {
        console.error("Error fetching academic records");
    } else {
        // Parse the response as JSON and cast it to the `Student[]` type
        students = (await response.json()) as Student[];
    }
} catch (err) {
    console.error("Fetch error:", err);
}
---

<Layout title="Home">
    <section>
        <h2>Peticiones de oportunidad para Art√≠culo 35</h2>

        {students.length > 0 ? (
            <!-- If there are students, display them in a list -->
            <ul>
                {students.map((student) => (
                    <li>
                        <strong>{student.name}</strong>

                        <ul>
                            {student.subjects.map((subject, index) => (
                                <li >{subject}</li>
                            ))}
                        </ul>

                        <a href={`/students/${student.student_id}`}>Detalles</a>
                    </li>
                ))}
            </ul>
        ) : (
            <p>No student records available.</p>
        )}
    </section>
</Layout>