---
import Layout from "../../layouts/Layout.astro";
import type { StudentDetails } from "../../types/types";

// Extract the `id` parameter from the Astro route (selected student)
const { id } = Astro.params;

// Initialize a default student object with empty values
let student: StudentDetails = {
    personalData: {
        student_id: 0,
        full_name: "",
        email: "",
    },
    academicRecords: {
        student_code: "",
        career: "",
        average_score: 0,
        enrollment_cycle: "",
        graduation_cycle: "",
        approved_credits: 0,
        pending_credits: 0,
        division: "",
    },
    requests: [],
};

// Fetch student details from the API
try {
    const response = await fetch(
        `http://localhost:4321/api/students_info/details/${id}`,
    );

    if (!response.ok) {
        console.error("Error fetching student information");
    } else {
        // Parse the response as JSON and cast it to the `StudentDetails` type
        student = (await response.json()) as StudentDetails;
    }
} catch (err) {
    console.error("Fetch error:", err);
}
---

<Layout title="Detalles del estudiante">
    <h1>{student.personalData.full_name}</h1>
    <p>ID: {student.personalData.student_id}</p>
    <p>Email: {student.personalData.email}</p>

    <h2>Información Académica</h2>
    <p>Código: {student.academicRecords.student_code}</p>
    <p>Carrera: {student.academicRecords.career}</p>
    <p>Promedio: {student.academicRecords.average_score}</p>
    <p>Ciclo de Ingreso: {student.academicRecords.enrollment_cycle}</p>
    <p>Ciclo de Egreso: {student.academicRecords.graduation_cycle}</p>
    <p>Créditos Aprobados: {student.academicRecords.approved_credits}</p>
    <p>Créditos Pendientes: {student.academicRecords.pending_credits}</p>
    <p>División: {student.academicRecords.division}</p>

    <div>
        <h2>Solicitudes</h2>
        {
            student.requests.length > 0 ? (
                <ul>
                    {student.requests.map((request) => (
                        <li>{request.available_subjects.name}</li>
                    ))}
                </ul>
            ) : (
                <p>No requests</p>
            )
        }
    </div>
    <a href={`/students/transcription/${id}`}>Ver declaración</a>

    {
        student.requests.length > 0 && (
            <div id="buttons-container">
                <button id="accept" class="aprove-deny" data-id={id} data-status="accepted">
                    Aprobar
                </button>
                <button id="deny" class="aprove-deny" data-id={id} data-status="rejected">
                    Denegar
                </button>
                <button id="reset" data-id={id} data-status="under_review">resetear</button>
            </div>
        )
    }
</Layout>

<script>
    // Get the accept and deny buttons
    const acceptButton = document.getElementById("accept");
    const denyButton = document.getElementById("deny");
    const resetButton = document.getElementById("reset");

    if (!acceptButton || !denyButton || !resetButton) {
        throw new Error("Buttons not found");
    }

    // Add event listeners (click) to the buttons
    acceptButton.addEventListener("click", () => {
        const studentId = acceptButton.dataset.id;
        const status = acceptButton.dataset.status;

        if (!studentId || !status) {
            throw new Error("ID or Status not found");
        }

        handleStatusChange(studentId, status);
    });

    denyButton.addEventListener("click", () => {
        const studentId = denyButton.dataset.id;
        const status = denyButton.dataset.status;

        if (!studentId || !status) {
            throw new Error("ID or Status not found");
        }

        handleStatusChange(studentId, status);
    });

    resetButton.addEventListener("click", () => {
        const studentId = resetButton.dataset.id;
        const status = resetButton.dataset.status;

        if (!studentId || !status) {
            throw new Error("ID or Status not found");
        }

        handleStatusChange(studentId, status);
    });

    async function handleStatusChange(studentId: string, status: string) {
        try {
            const response = await fetch(
                "http://localhost:4321/api/students_info/request_status",
                {
                    method: "PUT",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({
                        student_id: studentId,
                        requestStatus: status,
                    }),
                },
            );

            if (!response.ok) {
                console.error("Error updating student requests");
            } else {
                // Reload the page to reflect the changes
                window.location.href = "/";
            }
        } catch (err) {
            console.error("Fetch error:", err);
        }
    }
</script>

<style>
    #buttons-container {
        display: flex;
        gap: 0.75rem;
    }
    .aprove-deny {
        border-radius: 1rem;
        padding: 0.25rem 0.5rem;
        border: 1.5px solid;
    }
    #accept {
        background: #cee9e6;
        color: #0d9488;
        border-color: #0d9488;
    }
    #deny {
        background: pink;
        color: red;
        border-color: red;
    }
    button:hover {
        opacity: 0.5;
    }
</style>