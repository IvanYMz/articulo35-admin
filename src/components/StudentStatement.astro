---
import type { UrlResponse } from "../types/types";

// Recibir el parámetro
const { statement } = Astro.props;
const data: UrlResponse = statement;
---
    {
        data?.error ? (
            <p style="color: red;">Error: {data.error}</p>
        ) : (
            <div id="student-statement">
                <div id="declaration">
                    <h2>Declaración</h2>
                    {data?.audioUrl && data?.audioFileName !== '.emptyFolderPlaceholder' ? (
                    <h4>Audio: {data?.audioFileName}</h4>
                        <audio controls>
                            <source src={data.audioUrl} type="audio/mpeg" />
                            Your browser does not support the audio element.
                        </audio>
                    ) : (
                        <p>Sin archivo de audio. Por favor, suba uno.</p>

                        <form
                            id="uploadForm"
                            data-id={Astro.params.id}
                            data-audioFileName={data.audioFileName}
                            data-textFileName={data.transcriptionContent?.textFileName}
                        >
                            <input
                                type="file"
                                id="audioFile"
                                accept="audio/*"
                                required
                                />
                            <button id="submit_button" type="submit">Subir audio</button>
                        </form>
                    )}
                </div>

                <div id="transcription">
                    <h4>Transcription</h4>
                    {data.transcriptionContent?.content ? (
                        <p id="transcriptionContent">
                            {data?.transcriptionContent?.content}
                        </p>
                    ) : data?.audioUrl && data?.audioFileName !== '.emptyFolderPlaceholder' ? (
                        <form id="transcribeForm" data-id={Astro.params.id}>
                            <button type="submit">Transcribir Audio</button>
                        </form>
                    ) : (
                        <p>
                            No es posible transcribir. Suba un archivo de audio primero.
                        </p>
                    )}
                </div>
            </div>
        )
    }

<style>
    #student-statement {
        display: flex;
        flex-direction: column;
        background: white;
        padding: 1rem;
        border-radius: 0.5rem;
        gap: 1rem;
    }
    #transcription {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }
    #declaration {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }
    button {
        background-color: #2d3c5a;
        width: fit-content;
        color: white;
        border: none;
        border-radius: 0.25rem;
        padding: 0.5rem 1rem;
        cursor: pointer;
    }
    button:hover {
        opacity: 0.8;
    }
    form {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }
    h4 {
        color: #2d3c5a;
    }
    h2 {
        font-size: 1.25rem;
        font-weight: 600;
        padding-bottom: 0.5rem;
        margin-bottom: 0.5rem;
        color: #2d3c5a;
        border-bottom: 2px solid #2d3c5a;
    }
    #transcriptionContent {
        align-self: center;
        border: 0.5px solid lightgrey;
        padding: 0.5rem;
        border-radius: 0.5rem;
    }
</style>

<script>
    import { io, Socket } from "socket.io-client";
    const form = document.getElementById("uploadForm") as HTMLFormElement;
    let socket: Socket | null = null;

    if (form) {
        form.addEventListener("submit", async (event) => {
            event.preventDefault();

            const studentId = form.getAttribute("data-id") as string;
            const audioFileName = form.getAttribute("data-audioFileName") as string;
            const textFileName = form.getAttribute("data-textFileName") as string;
            const fileInput = document.getElementById("audioFile") as HTMLInputElement;

            if (!fileInput || !fileInput.files || fileInput.files.length === 0) {
                alert("Please select an audio file.");
                return;
            };

            if (audioFileName) {
                const confirmReplace = confirm(
                    `Un archivo de audio (${audioFileName}) y su transcripción ya existen. ¿Quieres reemplazarlos?`,
                );
                if (!confirmReplace) {
                    return;
                }
            };

            const file = fileInput.files[0];
            const formData = new FormData();
            formData.append("audio", file);
            formData.append("id", studentId);
            formData.append("audioFileName", audioFileName);
            formData.append("textFileName", textFileName);

            try {
                const response = await fetch(
                    "http://localhost:4321/api/students_info/transcription/upload_statement",
                    {
                        method: "PUT",
                        body: formData,
                    },
                );

                if (response.ok) {
                    alert("Audio uploaded successfully!");
                    window.location.reload();
                } else {
                    alert("Error uploading audio.");
                }
            } catch (error) {
                console.error("Error:", error);
                alert("Error uploading audio.");
            }
        });
    }

    const transcribeForm = document.getElementById("transcribeForm") as HTMLFormElement;

    if (transcribeForm) {
        transcribeForm.addEventListener("submit", async (event) => {
            event.preventDefault();
            const userId = form.getAttribute("data-id") as string;

            socket = io("http://localhost:5000");
            socket.emit("start_transcription", { user_id: userId });

            alert("Solicitud de transcripción enviada!");

            socket.on("transcription_completed", (data) => {
                console.log("Transcription completed:", data);
                alert("Transcripción completada!\nPor favor, recargue la página para ver los resultados.");

                if (socket) {
                    socket.disconnect();
                    console.log("Socket desconectado");
                }
            });

            try {
                const response = await fetch(
                    "http://127.0.0.1:5000/transcribe",
                    {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                        },
                        body: JSON.stringify({ user_id: userId }),
                    },
                );

                if (!response.ok) {
                    throw new Error("Error en la transcripción");
                }

                const data = await response.json();
                console.log("Transcription result: ", data.transcription);
            } catch (error) {
                console.error("Error:", error);
                alert("Hubo un problema con la transcripción.");
            }
        });
    }
</script>