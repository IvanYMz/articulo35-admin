---
import type { UrlResponse } from "../types/types";

// Recibir el parámetro
const { id } = Astro.params;
const { statement } = Astro.props;
const data: UrlResponse = statement;
---

{
    data?.error ? (
        <p style="color: red;">Error: {data.error}</p>
    ) : (
        <div id="student-statement" data-student-id={id}>
            <div id="declaration">
                <h2>Declaración</h2>
                {data?.audioUrl && data?.audioFileName !== '.emptyFolderPlaceholder' ? (
                    <button id="toggle-update-section">
                        <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    width="24"
                                    height="24"
                                    viewBox="0 0 24 24"
                                    fill="#2d3c5a"
                                >
                                    <path d="m7 17.013 4.413-.015 9.632-9.54c.378-.378.586-.88.586-1.414s-.208-1.036-.586-1.414l-1.586-1.586c-.756-.756-2.075-.752-2.825-.003L7 12.583v4.43zM18.045 4.458l1.589 1.583-1.597 1.582-1.586-1.585 1.594-1.58zM9 13.417l6.03-5.973 1.586 1.586-6.029 5.971L9 15.006v-1.589z" />
                                    <path d="M5 21h14c1.103 0 2-.897 2-2v-8.668l-2 2V19H8.158c-.026 0-.053.01-.079.01-.033 0-.066-.009-.1-.01H5V5h6.847l2-2H5c-1.103 0-2 .897-2 2v14c0 1.103.897 2 2 2z" />
                                </svg>
                    </button>
                    <h4>Audio: {data?.audioFileName}</h4>
                    <audio controls>
                        <source src={data.audioUrl} type="audio/mpeg" />
                        Your browser does not support the audio element.
                    </audio>
                    <form
                        id="uploadForm"
                        class="updateForm"
                        data-audioFileName={data.audioFileName}
                        data-textFileName={data.transcriptionContent?.textFileName}
                    >
                        <input
                            type="file"
                            id="audioFile"
                            accept="audio/*"
                            required
                        />
                        <button id="submit_button" class="submitButton" type="submit">Subir audio</button>
                    </form>
                ) : (
                    <p>Sin archivo de audio. Por favor, suba uno.</p>

                    <form
                        id="uploadForm"
                        data-audioFileName={data.audioFileName}
                        data-textFileName={data.transcriptionContent?.textFileName}
                    >
                        <input
                            type="file"
                            id="audioFile"
                            accept="audio/*"
                            required
                        />
                        <button id="submit_button" class="submitButton" type="submit">Subir audio</button>
                    </form>
                )}
            </div>

            <div id="transcription">
                <h4>Transcripción</h4>
                {data.transcriptionContent?.content ? (
                    <p id="transcriptionContent">
                        {data?.transcriptionContent?.content}
                    </p>
                ) : data?.audioUrl && data?.audioFileName !== '.emptyFolderPlaceholder' ? (
                    <form id="transcribeForm">
                        <button class="submitButton" type="submit">Transcribir Audio</button>
                    </form>
                ) : (
                    <p>
                        No es posible transcribir. Suba un archivo de audio primero.
                    </p>
                )}
            </div>
        </div>
    )
}

<style>
    #student-statement {
        display: flex;
        flex-direction: column;
        background: white;
        padding: 1rem;
        border-radius: 0.5rem;
        gap: 1rem;
    }
    #transcription {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }
    #declaration {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }
    .submitButton {
        background-color: #2d3c5a;
        width: fit-content;
        color: white;
        border: none;
        border-radius: 0.25rem;
        padding: 0.5rem 1rem;
        cursor: pointer;
    }
    .submitButton:hover {
        opacity: 0.8;
    }
    form {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }
    h4 {
        color: #2d3c5a;
    }
    h2 {
        font-size: 1.25rem;
        font-weight: 600;
        padding-bottom: 0.5rem;
        margin-bottom: 0.5rem;
        color: #2d3c5a;
        border-bottom: 2px solid #2d3c5a;
    }
    .updateForm {
        display: none;
    }
    .updateForm.show {
        display: block;
    }
    #transcriptionContent {
        align-self: center;
        border: 0.5px solid lightgrey;
        padding: 0.5rem;
        border-radius: 0.5rem;
    }
    #toggle-update-section {
        align-self: flex-end;
        border-radius: 0.25rem;
        padding: 0.25rem;
    }
    #toggle-update-section:hover {
        background: #2d3c5a;
    }
    #toggle-update-section:hover svg {
        fill: white;
    }
</style>

<script>
    import { io, Socket } from "socket.io-client";
    import { API_ROUTES } from "../lib/apiRoutes";
    const uploadForm = document.getElementById("uploadForm") as HTMLFormElement;
    const transcribeForm = document.getElementById("transcribeForm") as HTMLFormElement;
    const updateButton = document.getElementById("toggle-update-section") as HTMLFormElement;
    let socket: Socket | null = null;

    if(updateButton && uploadForm) {
        updateButton.addEventListener("click", () => {
            uploadForm.classList.toggle("show");
        });
    };

    // Obtener el id del estudiante desde el contenedor
    const studentId = document.getElementById("student-statement")?.getAttribute("data-student-id");

    // Subir el audio
    if (uploadForm) {
        uploadForm.addEventListener("submit", async (event) => {
            event.preventDefault();

            const audioFileName = uploadForm.getAttribute("data-audioFileName") as string;
            const textFileName = uploadForm.getAttribute("data-textFileName") as string;
            const fileInput = document.getElementById("audioFile") as HTMLInputElement;

            if (!fileInput || !fileInput.files || fileInput.files.length === 0) {
                alert("Please select an audio file.");
                return;
            }

            if (audioFileName) {
                const confirmReplace = confirm(
                    `Un archivo de audio (${audioFileName}) y su transcripción ya existen. ¿Quieres reemplazarlos?`
                );
                if (!confirmReplace) {
                    return;
                }
            }

            const file = fileInput.files[0];
            const formData = new FormData();
            formData.append("audio", file);
            formData.append("id", studentId as string);
            formData.append("audioFileName", audioFileName);
            formData.append("textFileName", textFileName);

            try {
                const response = await fetch(
                    API_ROUTES.STUDENTS_UPLOAD_STATEMENT,
                    {
                        method: "PUT",
                        body: formData,
                    }
                );

                if (response.ok) {
                    alert("Audio uploaded successfully!");
                    window.location.reload();
                } else {
                    alert("Error uploading audio.");
                }
            } catch (error) {
                console.error("Error:", error);
                alert("Error uploading audio.");
            }
        });
    }

    

    // Enviar solicitud de transcripción
    if (transcribeForm) {
    transcribeForm.addEventListener("submit", async (event) => {
        event.preventDefault();

        const transcribeButton = transcribeForm.querySelector("button");
        if (transcribeButton) {
            transcribeButton.disabled = true;
            transcribeButton.style.cursor = "not-allowed";
            transcribeButton.textContent = "Transcribiendo...";
        }

        socket = io("https://ns99gpgf-5000.usw3.devtunnels.ms");
        socket.emit("start_transcription", { user_id: studentId });

        alert("Solicitud de transcripción enviada!");

        socket.on("transcription_completed", (data) => {
            console.log("Transcription completed:", data);
            alert("Transcripción completada!\nLa página se recargará para mostrar los resultados.");

            if (socket) {
                socket.disconnect();
                console.log("Socket desconectado");
            }

            window.location.reload(); // Recargar la página al finalizar
        });

        try {
            const response = await fetch(
                "https://ns99gpgf-5000.usw3.devtunnels.ms/transcribe",
                {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                    },
                    body: JSON.stringify({ user_id: studentId }),
                }
            );

            if (!response.ok) {
                throw new Error("Error en la transcripción");
            }

            const data = await response.json();
            console.log("Transcription result: ", data.transcription);
        } catch (error) {
            console.error("Error:", error);
            alert("Hubo un problema con la transcripción.");
        }
    });
}

</script>
